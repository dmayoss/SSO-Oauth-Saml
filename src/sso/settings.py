"""
Django settings for sso project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "askldjrlaksuydrbdji1wg5n9e7ngwp_kkag(q*l3@mm!xlm)tp04-q9a&sm+w)ym"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    "127.0.0.1",
    "*",
]

# silence this warning, for django user sessions
SILENCED_SYSTEM_CHECKS = ["admin.E410", "mysql.W003"]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    # 'user_sessions',
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "widget_tweaks",
    # "termsandconditions",
    # 'django_otp.plugins.otp_email',
    "two_factor",
    # 'two_factor.plugins.phonenumber',
    # 'two_factor.plugins.yubikey',
    # 'two_factor.plugins.email',
    # 'otp_yubikey',
    "oauth2_provider",
    "phonenumber_field",  # have it, may as well use it.
    # 'django_login_history',  # may not want this if we log via syslog and signals
    "captcha",
    "users",
    "appdb",
    "login",
    "uniauth_saml2_idp",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "x_forwarded_for.middleware.XForwardedForMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 'user_sessions.middleware.SessionMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "djangosaml2.middleware.SamlSessionMiddleware",
    # disabled
    # "termsandconditions.middleware.TermsAndConditionsRedirectMiddleware",
    "sso.middleware.TwoFactorEnforceMiddleware",
]

# below is for django_user_sessions package
# SESSION_ENGINE = 'user_sessions.backends.db'

# cache'd in DB for better performance
# needs cache to be setup or it causes odd login/logout errors
# SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

# django session expires after x*60 = minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 720 * 60  # 12 hours

# for chrome saml behaviour
SESSION_COOKIE_SECURE = True

# secure csrf cookie if this is important
CSRF_COOKIE_SECURE = True

ROOT_URLCONF = "sso.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            str(BASE_DIR.joinpath("templates")),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sso.wsgi.application"

from sso.secrets import (
    DBHOST,
    DBNAME,
    DBPASS,
    DBPORT,
    DBUSER,
    LDAP_NAME,
    LDAP_PASS,
    LDAP_USER,
    SITE_ADMIN_EMAIL,
)

DATABASES = {
    "default": {
        "ENGINE": "mysql.connector.django",
        "NAME": DBNAME,
        "USER": DBUSER,
        "PASSWORD": DBPASS,
        "HOST": DBHOST,
        "PORT": DBPORT,
        "OPTIONS": {
            "charset": "utf8mb4",
            "collation": "utf8mb4_general_ci",
        },
    },
    #"ldap": {
    #    "ENGINE": "ldapdb.backends.ldap",
    #    "NAME": LDAP_NAME,
    #    "USER": LDAP_USER,
    #    "PASSWORD": LDAP_PASS,
    #},
}
DATABASE_ROUTERS = ["ldapdb.router.Router"]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,
        },
    },
    {
        "NAME": "sso.validators.MaximumLengthValidator",
        "OPTIONS": {
            "max_length": 128,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "sso.validators.UppercaseValidator",
    },
    {
        "NAME": "sso.validators.LowercaseValidator",
    },
    {
        "NAME": "sso.validators.SpecialCharValidator",
    },
    {
        "NAME": "sso.validators.NumberValidator",
    },
]

# let's switch to argon2
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

DATETIME_INPUT_FORMATS = ["%Y-%m-%d %H:%M:%S", "%d/%m/%Y %H:%M:%S"]

DATE_INPUT_FORMATS = ["%Y-%m-%d", "%d/%m/%Y"]

"""
# email notification on error 500
DEFAULT_FROM_EMAIL = 'idp@emaildomain.com'
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_HOST = 'mail.emaildomain.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

ADMINS = [('name surname', 'user1@DOMAIN'),
          ('name surnale', 'user2@DOMAIN'),]
"""

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # 'sass_processor.finders.CssFinder',
]

STATIC_URL = "/static/"
STATIC_ROOT = str(BASE_DIR.joinpath("static"))

MEDIA_ROOT = str(BASE_DIR.joinpath("data/media"))


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    "sso.auth.EmailBackend",
    "oauth2_provider.backends.OAuth2Backend",
]

# APPEND_SLASH = False
APPEND_SLASH = True

LOGIN_URL = "two_factor:login"
# LOGIN_URL = '/login/'
# LOGIN_URL = 'login'
LOGOUT_URL = "auth_logout"

# this one is optional
# LOGIN_REDIRECT_URL = 'two_factor:profile'
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "home"

# Emailing settings
# file backend
# EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
# EMAIL_FILE_PATH = str(BASE_DIR.joinpath('sent_emails'))

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST: "localhost"
EMAIL_PORT: 25
EMAIL_FROM = SITE_ADMIN_EMAIL
EMAIL_USE_TLS: False
EMAIL_USE_SSL: False
# EMAIL_HOST = 'mail.emaildomain.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = None
# EMAIL_HOST_PASSWORD = None

PASSWORD_RESET_TIMEOUT = 600

# this is needed for emails to be usernames
AUTH_USER_MODEL = "users.CustomUser"

# 2FA malarkey
TWO_FACTOR_PATCH_ADMIN = True
# TWO_FACTOR_REMEMBER_COOKIE_AGE = 36500  # default is 0, not active
# TWO_FACTOR_CALL_GATEWAY = 'two_factor.gateways.twilio.gateway.Twilio'
# TWO_FACTOR_CALL_GATEWAY = 'two_factor.gateways.fake.Fake'
TWO_FACTOR_CALL_GATEWAY = None
TWO_FACTOR_SMS_GATEWAY = None
TWO_FACTOR_TOTP_DIGITS = 6  # default is 6
TWO_FACTOR_LOGIN_TIMEOUT = 600  # default is 600

# default should be '1' so 1 2 4 8 seconds after 1 2 3 4 failed tries
# this should double that
# 0 should disable
OTP_TOTP_THROTTLE_FACTOR = 2
OTP_HOTP_THROTTLE_FACTOR = 2
OTP_STATIC_THROTTLE_FACTOR = 2


# phonenumber stuff (using phonenumberslite)
PHONENUMBER_DEFAULT_REGION = None
# PHONENUMBER_DB_FORMAT = 'E164', 'INTERNATIONAL', 'NATIONAL' or 'RFC3966'
PHONENUMBER_DB_FORMAT = "E164"

# setup logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s - [%(asctime)s] - %(name)s.%(funcName)s:%(lineno)s - %(message)s",
        },
        "terse": {
            "format": "%(name)s.%(funcName)s - %(message)s",
        },
        "middle": {
            "format": "[%(asctime)s] %(name)s.%(funcName)s - %(message)s",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "formatter": "middle",
            "class": "logging.FileHandler",
            "filename": "/var/log/django/emaildomain_sso.log",
        },
        "security": {
            "level": "INFO",
            "formatter": "middle",
            "class": "logging.FileHandler",
            "filename": "/var/log/django/security_sso.log",
        },
        "extauth": {
            "level": "INFO",
            "formatter": "middle",
            "class": "logging.FileHandler",
            "filename": "/var/log/django/external_auth.log",
        },
        "syslog": {
            "level": "INFO",
            "class": "logging.handlers.SysLogHandler",
            "formatter": "terse",
            "facility": "local1",
            "address": "/var/run/log",
        },
    },
    "loggers": {
        "django": {
            "handlers": [
                "file",
                "syslog",
            ],
            "level": "INFO",
            "propagate": True,
        },
        "saml_oauth": {
            "handlers": [
                "extauth",
                "syslog",
            ],
            "level": "INFO",
            "propagate": True,
        },
        "sso": {
            "handlers": [
                "security",
                "syslog",
            ],
            "level": "INFO",
            "propagate": True,
        },
        # "termsandconditions": {
        #     "handlers": [
        #         "tos",
        #         "syslog",
        #     ],
        #     "level": "INFO",
        #     "propagate": True,
        # },
    },
}


# UNIAUTH SAML CONFIGS

import os

import saml2
from django.utils.translation import gettext as _
from saml2 import (
    BINDING_HTTP_ARTIFACT,
    BINDING_HTTP_POST,
    BINDING_HTTP_REDIRECT,
    BINDING_SOAP,
)
from saml2.entity_category import edugain, refeds
from saml2.saml import (
    NAME_FORMAT_BASIC,
    NAME_FORMAT_UNSPECIFIED,
    NAME_FORMAT_URI,
    NAMEID_FORMAT_EMAILADDRESS,
    NAMEID_FORMAT_PERSISTENT,
    NAMEID_FORMAT_TRANSIENT,
)
from saml2.sigver import get_xmlsec_binary

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# make sure /idp/ is where uniauth is
# login url set earlier - make sure it creates SAML session!
# LOGIN_URL = '/idp/login/'

# idp protocol:fqdn:port
HOST = "sso.emaildomain.com"
PORT = None  # None if 80 or 443
HTTPS = True

BASE = "https://{}".format(HOST) if HTTPS else "http://{}".format(HOST)
if PORT:
    BASE += ":{}".format(PORT)

BASE_URL = "{}/idp".format(BASE)
# end

IDP_SP_METADATA_PATH = os.path.join(BASE_DIR, "data/metadata")

# please check [Refactor datetime](https://github.com/IdentityPython/pysaml2/pull/518)
# only used to parse issue_instant in a try...
SAML2_DATETIME_FORMATS = [
    "%Y-%m-%dT%H:%M:%SZ",
    "%Y-%m-%dT%H:%M:%S.%fZ",
    "%Y%m%d%H%M%SZ",
]

# this will keep xml signed/encrypted files in /tmp
# os.environ['PYSAML2_DELETE_XMLSEC_TMP'] = "False"

SAML_METADATA = {
    "local": [
        # (os.path.join(IDP_SP_METADATA_PATH, 'sp_metadata.xml'),),
        # (os.path.join(IDP_SP_METADATA_PATH, 'sp_shib_metadata.xml'),),
        # (os.path.join(IDP_SP_METADATA_PATH, 'satosa_backend.xml'),),
    ],
    #
    # "remote": [{
    # "url": 'https://satosa.testunical.it/Saml2/metadata',
    # "cert": "/opt/satosa-saml2/pki/frontend.cert",
    # working only with pplx-dev fork:
    # "disable_ssl_certificate_validation": True,
    # }],
    # "mdq": [{
    # "url": "http://localhost:8001",
    ## "url": "https://ds.testunical.it",
    # "cert": "certficates/others/ds.testunical.it.cert",
    # working only with pplx-dev fork:
    # "disable_ssl_certificate_validation": True,
    # }]
}

SAML_CONTACTS = [
    {
        "given_name": "Daniel",
        "sur_name": "Mayoss",
        "company": "Company",
        "email_address": "daniel.mayoss@emaildomain.com",
        "contact_type": "administrative",
    },
    {
        "given_name": "Daniel",
        "sur_name": "Mayoss",
        "company": "Company",
        "email_address": "daniel.mayoss@emaildomain.com",
        "contact_type": "technical",
    },
]


SAML_ORG_INFO = {
    "name": [("Company", "en")],
    "display_name": [("Company", "en")],
    "url": [(BASE, "en")],
}

SAML_AA_CONFIG = {
    "debug": True,
    "xmlsec_binary": "/usr/local/bin/xmlsec1",
    "entityid": "%s/aa/metadata" % BASE_URL,
    "entity_category_support": [
        edugain.COCO,  # "http://www.geant.net/uri/dataprotection-code-of-conduct/v1"
        refeds.RESEARCH_AND_SCHOLARSHIP,
    ],
    "attribute_map_dir": "data/attribute-maps",
    "description": "SAML2 IDP",
    "service": {
        "aa": {
            "endpoints": {
                "attribute_service": [
                    ("%s/aap" % BASE, BINDING_HTTP_POST),
                ]
            },
            # transient per default, persistent if asked by sp
            "name_id_format": [
                NAMEID_FORMAT_TRANSIENT,
                NAMEID_FORMAT_PERSISTENT,
                NAMEID_FORMAT_EMAILADDRESS,
            ],
            "validate_certificate": True,
            # this is default
            "only_use_keys_in_metadata": True,
            # these needs to change a standard shibboleth sp configuration
            # because in GET binding the signature is in the url and not in the XML ...
            # solution: disable HTTP-REDIRECT bind
            # this needs the certificate in the authn request, not implemented in every sp ...
            "want_authn_requests_only_with_valid_cert": False,
            # HTTP-REDIRECT and many SP still not sign the authnRequest....
            "want_authn_requests_signed": False,
            "sign_response": True,
            "sign_assertion": True,
            # the following if set should be a cert filename, not a boolean
            # 'verify_ssl_cert': None,
            # 'verify_encrypt_cert_assertion': None,
            # 'verify_encrypt_cert_advice': None,
            # this works if pysaml2 is installed from peppelinux's fork
            "signing_algorithm": saml2.xmldsig.SIG_RSA_SHA256,
            "digest_algorithm": saml2.xmldsig.DIGEST_SHA256,
            # saml.assertion #807
            "policy": {
                "default": {
                    "lifetime": {"hours": 360},
                }
            },
            "release_policy": {
                "default": {
                    "lifetime": {"minutes": 15},
                    "attribute_restrictions": None,  # means all I have
                    "name_form": NAME_FORMAT_URI,
                },
            },
        },
    },
    "metadata": SAML_METADATA,
    "key_file": BASE_DIR + "/certificates/cert.key",
    "cert_file": BASE_DIR + "/certificates/cert.cer",
    "contact_person": SAML_CONTACTS,
    "organization": SAML_ORG_INFO,
}

SAML_IDP_CONFIG = {
    "debug": True,
    "xmlsec_binary": "/usr/local/bin/xmlsec1",
    "entityid": "%s/metadata" % BASE_URL,
    "entity_category_support": [
        edugain.COCO,  # "http://www.geant.net/uri/dataprotection-code-of-conduct/v1"
        refeds.RESEARCH_AND_SCHOLARSHIP,
    ],
    "attribute_map_dir": "data/attribute-maps",
    "description": "SAML2 IDP",
    "service": {
        "idp": {
            "name": "Django SAML IdP",
            "ui_info": {
                "display_name": [
                    {"lang": "en", "text": "Company IdP"},
                    {"lang": "it", "text": "Company IdP"},
                ],
                "description": [
                    {"lang": "en", "text": "Company IdP"},
                    {"lang": "it", "text": "Company Identity Provider"},
                ],
                "information_url": {
                    "lang": "it",
                    "text": "https://www.emaildomain.com/privacy/",
                },
                "privacy_statement_url": {
                    "lang": "it",
                    "text": "https://www.emaildomain.com/privacy/",
                },
                "logo": {
                    "width": "80",
                    "height": "60",
                    "text": "https://{}/static/img/logo.svg".format(HOST),
                },
            },
            "scope": ["emaildomain.com"],
            "endpoints": {
                "single_sign_on_service": [
                    ("%s/sso/post" % BASE_URL, BINDING_HTTP_POST),
                    # HTTP-REDIRECT could introduce troubles with signing verifications ...
                    ("%s/sso/redirect" % BASE_URL, BINDING_HTTP_REDIRECT),
                    # TODO
                    # ("%s/sso/art" % BASE_URL, BINDING_HTTP_ARTIFACT),
                ],
                "single_logout_service": [
                    ("%s/slo/post" % BASE_URL, BINDING_HTTP_POST),
                    ("%s/slo/redirect" % BASE_URL, BINDING_HTTP_REDIRECT)
                    # ("%s/slo/soap" % BASE_URL, BINDING_SOAP),
                ],
                # "attribute_service": [
                # ("%s/aap" % BASE_URL, BINDING_HTTP_POST),
                # ]
            },
            # transient per default, persistent if asked by sp
            "name_id_format": [
                NAMEID_FORMAT_TRANSIENT,
                NAMEID_FORMAT_PERSISTENT,
                NAMEID_FORMAT_EMAILADDRESS,
            ],
            "validate_certificate": True,
            # this is default
            "only_use_keys_in_metadata": True,
            # these needs to change a standard shibboleth sp configuration
            # because in GET binding the signature is in the url and not in the XML ...
            # solution: disable HTTP-REDIRECT bind
            # this needs the certificate in the authn request, not implemented in every sp ...
            "want_authn_requests_only_with_valid_cert": False,
            # HTTP-REDIRECT and many SP still not sign the authnRequest....
            "want_authn_requests_signed": False,
            "logout_requests_signed": True,
            "sign_response": True,
            "sign_assertion": True,
            # the following if set should be a cert filename, not a boolean
            # 'verify_ssl_cert': None,
            # 'verify_encrypt_cert_assertion': None,
            # 'verify_encrypt_cert_advice': None,
            "signing_algorithm": saml2.xmldsig.SIG_RSA_SHA256,
            "digest_algorithm": saml2.xmldsig.DIGEST_SHA256,
            "policy": {
                "default": {
                    "lifetime": {"minutes": 15},
                    # if the sp are not conform to entity_categories (in our metadata) the attributes will not be released
                    # "entity_categories": ["refeds", "edugain"],
                    # "entity_categories": ["refeds",],
                    "name_form": NAME_FORMAT_URI,
                    # global pysaml2 restrictions, useless with custom AttributeProcessors
                    # "attribute_restrictions": {
                    # 'username': None,
                    # 'first_name': None,
                    # 'last_name': None,
                    #
                    ## Here only mail addresses that end with ".umu.se" will be returned.
                    # 'email': None,
                    # #'email': [".*\.umu\.se$"],
                    # "mail": [".*\.umu\.se$"],
                    # },
                },
                # attributes will be released only if this SP have refeds in out entity_categories in its metadata.
                # "https://sp1.testunical.it/saml2/metadata/": {
                # "entity_categories": ["refeds",]
                # }
                # "https://example.com/sp": {
                # "lifetime": {"minutes": 5},
                # "nameid_format": NAMEID_FORMAT_PERSISTENT,
                # "name_form": NAME_FORMAT_BASIC
                # }
            },
        },
        # AttributeAuthorityDescriptor is needed for legacy SP
        # this adds the needed attributes in metadata ...!
        #'aq': {
        #
        #    }
    },
    # Quite useless, you can even configure metadata store through admin backend!
    "metadata": SAML_METADATA,
    # Signing
    "key_file": BASE_DIR + "/certificates/cert.key",
    "cert_file": BASE_DIR + "/certificates/cert.cer",
    # Encryption
    "encryption_keypairs": [
        {
            "key_file": BASE_DIR + "/certificates/cert.key",
            "cert_file": BASE_DIR + "/certificates/cert.cer",
        }
    ],
    # How many hours this configuration is expected to be accurate as eposed in metadata
    #'valid_for': 24 * 10,
    # own metadata settings
    "contact_person": SAML_CONTACTS,
    # you can set multilanguage information here
    "organization": SAML_ORG_INFO,
    # TODO: put idp logs in a separate file too
    # "logger": {
    # "rotating": {
    # "filename": "idp.log",
    # "maxBytes": 500000,
    # "backupCount": 5,
    # },
    # "loglevel": "debug",
    # }
}

SAML_IDP_SHOW_USER_AGREEMENT_SCREEN = True
SAML_IDP_SHOW_CONSENT_FORM = False
SAML_IDP_USER_AGREEMENT_ATTR_EXCLUDE = []
# User agreements will be valid for 1 year unless overriden. If this attribute is not used, user agreements will not expire
SAML_IDP_USER_AGREEMENT_VALID_FOR = 24 * 365

SAML_IDP_DJANGO_USERNAME_FIELD = "email"
# alg, salt and arguments used for computed user identifier used in opaque, transient and persistent nameid_format
SAML_COMPUTEDID_HASHALG = "sha256"
SAML_COMPUTEDID_SALT = b"87sdfybDSFDSFsdf__7yb"

SAML_AUTHN_SIGN_ALG = saml2.xmldsig.SIG_RSA_SHA256
SAML_AUTHN_DIGEST_ALG = saml2.xmldsig.DIGEST_SHA256

# Encrypt authn response by default (will not work with SP that doesn't have enc keys in their metadata)
SAML_FORCE_ENCRYPTED_ASSERTION = False

# if enabled and nameid format is persistent the nameid related to user:recipient_id will be stored in PersistentId model
SAML_ALLOWCREATE = True

# SP configurations
SAML_IDP_SPCONFIG = {}

# Disable unconfigured SP even if they are in MetadataStore
SAML_DISALLOW_UNDEFINED_SP = False

# This configuration will be used by default for each newly created SP through admin backend.
DEFAULT_SPCONFIG = {
    "processor": "uniauth_saml2_idp.processors.base.BaseProcessor",
    "attribute_mapping": {
        "email": "email",
        "sn": "last_name",
        "givenName": "first_name",
        "displayName": "get_full_name",
    },
    "display_name": "Company SP",
    "display_description": "This is for test purpose",
    "display_agreement_message": "Some information about you has been requested",  # Only for SP externals to our organization
    "signing_algorithm": saml2.xmldsig.SIG_RSA_SHA256,
    "digest_algorithm": saml2.xmldsig.DIGEST_SHA256,
    "disable_encrypted_assertions": True,
    # 'show_user_agreement_screen': SAML_IDP_SHOW_USER_AGREEMENT_SCREEN
}

# Quite useless, you can even configure SP through admin backend!
# shibboleth test SP
# SAML_IDP_SPCONFIG['https://sp.testunical.it/shibboleth'] = DEFAULT_SPCONFIG
# SAML_IDP_SPCONFIG['https://sp1.testunical.it/saml2/metadata/'] = DEFAULT_SPCONFIG

# satosa frontend
# SAML_IDP_SPCONFIG['https://satosa.testunical.it/Saml2/metadata'] = DEFAULT_SPCONFIG


OAUTH2_PROVIDER = {
    "PKCE_REQUIRED": False,
    "OIDC_ENABLED": False,
    # add key as long string inside '''{string}''' to secrets
    #"OIDC_RSA_PRIVATE_KEY": OIDC_RSA_PRIVATE_KEY,
    "SCOPES": {
        # "openid": "OpenID Connect scope",
        "read_user": "user read scope",
        "profile": "profile read scope",
        "read": "read scope",
        "write": "write scope",
    },
}

# most of these are defaults
ACCEPT_TERMS_PATH = "/terms/accept/"
TERMS_EXCLUDE_URL_LIST = {LOGOUT_URL, "/accounts/logout/", "/about/", "/admin/"}
TERMS_EXCLUDE_URL_CONTAINS_LIST = {}
TERMS_EXCLUDE_SUPERUSERS = True
TERMS_CACHE_SECONDS = 30  # seconds in cache, 30 default
TERMS_IP_HEADER_NAME = "HTTP_X_FORWARDED_FOR"  # default is 'REMOTE_ADDR'
TERMS_STORE_IP_ADDRESS = True
