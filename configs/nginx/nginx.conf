worker_processes 8;
worker_cpu_affinity auto;
worker_shutdown_timeout 31s;

user nobody nobody;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

load_module "/usr/local/libexec/nginx/ngx_http_modsecurity_module.so";
load_module "/usr/local/libexec/nginx/ngx_http_vhost_traffic_status_module.so";

events {
    worker_connections 2048; # increase if you have lots of clients
    accept_mutex on; # set to 'on' if nginx worker_processes > 1
    accept_mutex_delay 250ms;
}


http {
    server_tokens off;
    gzip on;
    gzip_vary on;
    gzip_min_length 256;
    gzip_types application/atom+xml application/geo+json application/javascript application/x-javascript application/json application/ld+json application/manifest+json application/rdf+xml application/rss+xml application/xhtml+xml application/xml font/eot font/otf font/ttf image/svg+xml text/css text/javascript text/plain text/xml text/csv;
    
    proxy_connect_timeout 10s;
    proxy_send_timeout 10s;
    proxy_read_timeout 30s;
    proxy_buffers 16 32k;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Forwarded-Port $forwardport;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header Connection "";

    proxy_hide_header X-Transaction-ID;

    lingering_timeout 5s;
    send_timeout 2s;
    reset_timedout_connection on;
    client_body_timeout 10s;
    client_body_buffer_size 32k;

    # limit_req_zone $limit_key_ip zone=remote_ip_10:10m rate=10r/s;
    limit_req_zone $binary_remote_addr$request zone=request_10:100m rate=10r/s;

    # TODO Comment from Tommi:
    ## Tune correctly, or disable caching?
    ssl_session_cache shared:SSL:10m;
    proxy_no_cache 1;
    proxy_cache_bypass 1;
    #proxy_http_version 1.1;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" $status reqLength $request_length resLength $body_bytes_sent reqTime $request_time resTime $upstream_response_time "$http_referer" "$http_user_agent" "$http_x_forwarded_for" $ssl_protocol/$ssl_cipher $ssl_client_s_dn/$ssl_client_i_dn ratelimit $limit_req_status tID $upstream_http_x_transaction_id';
    log_format cleaned '$remote_addr - $remote_user [$time_local] $status reqLength $request_length resLength $body_bytes_sent reqTime $request_time resTime $upstream_response_time "$http_user_agent" "$http_x_forwarded_for" $ssl_protocol/$ssl_cipher $ssl_client_s_dn/$ssl_client_i_dn ratelimit $limit_req_status tID $upstream_http_x_transaction_id';
    log_format postdata '$remote_addr - $remote_user [$time_local] "$request" $status reqLength $request_length resLength $body_bytes_sent reqTime $request_time resTime $upstream_response_time "$http_referer" "$http_user_agent" "$http_x_forwarded_for" $ssl_protocol/$ssl_cipher $ssl_client_s_dn/$ssl_client_i_dn ratelimit $limit_req_status tID $upstream_http_x_transaction_id "$request_body"';


    keepalive_timeout 30s;
    
    vhost_traffic_status_zone;
    vhost_traffic_status_histogram_buckets 0.005 0.01 0.05 0.1 0.2 0.5 1 5 10;
    underscores_in_headers on;
    modsecurity off;
    modsecurity_rules_file /usr/local/etc/modsecurity/modsecurity.conf;
    
    open_log_file_cache max=1000;
    proxy_redirect off;
    proxy_buffering on;
    proxy_ignore_client_abort on;
    resolver_timeout 5s;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
    ssl_prefer_server_ciphers on;

    # TODO: comment from Tommi:
    ## check all timeouts for SSO usage
    client_header_timeout 5s;

    include mime.types;
    # fallback in case we can't determine a type
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log cleaned;
    sendfile on;

    # if no Hosts match, close the connection to prevent host spoofing
    server {
        listen 80 default_server;
        return 444;
    }

    server {
        listen 80;
        server_name sso.email.com;
        return 301 https://$server_name$request_uri;
        
        # keepalive 20;
        # zone gunicorn.applications 128k;
        # TODO: do we need these many? Can reduce drastically
        # max_conns 10000;
    }

    server {
        listen 443 ssl http2;
        server_name sso.email.com;

        ssl_certificate      /usr/local/etc/ssl/acme/sso.email.com/cert.fullchain;
        ssl_certificate_key  /usr/local/etc/ssl/acme/sso.email.com/cert.key;

        add_header Strict-Transport-Security "max-age=15552000; includeSubDomains" always;

        include sites/sso.conf;

        # keepalive 20;
        # zone gunicorn.applications;
        # TODO: do we need these many? Can reduce drastically
        # max_conns 10000;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_session_timeout 15m;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    }
}
